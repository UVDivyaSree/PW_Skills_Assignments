#1
SELECT TABLE_NAME, COLUMN_NAME
FROM INFORMATION_SCHEMA.KEY_COLUMN_USAGE
WHERE CONSTRAINT_NAME = 'PRIMARY';

SELECT TABLE_NAME, COLUMN_NAME, CONSTRAINT_NAME, REFERENCED_TABLE_NAME, REFERENCED_COLUMN_NAME
FROM INFORMATION_SCHEMA.KEY_COLUMN_USAGE
WHERE REFERENCED_TABLE_NAME IS NOT NULL;

#2
SELECT * FROM actor;

#3
SELECT * FROM customer;

#4
SELECT DISTINCT country FROM country;

#5
SELECT customer_id, first_name, last_name, email
FROM Customer
WHERE active = 1;

#6
SELECT rental_id
FROM Rental
WHERE customer_id = 1;

#7 - Display all the films whose rental duration is greater than 5 .
SELECT film_id, title, rental_duration
FROM Film
WHERE rental_duration > 5;

#8 - List the total number of films whose replacement cost is greater than $15 and less than $20.
SELECT COUNT(*) AS total_films
FROM Film
WHERE replacement_cost > 15 AND replacement_cost < 20;

#9 - Display the count of unique first names of actors.
SELECT COUNT(DISTINCT first_name) AS unique_actor_names
FROM Actor;

#10- Display the first 10 records from the customer table 
SELECT * FROM Customer
LIMIT 10;

#11 - Display the first 3 records from the customer table whose first name starts with ‘b’.
SELECT * FROM Customer
WHERE first_name LIKE 'B%'
LIMIT 3;

#12 -Display the names of the first 5 movies which are rated as ‘G’.
SELECT title FROM film
WHERE rating = 'G'
LIMIT 5;

#13-Find all customers whose first name starts with "a".
SELECT * FROM Customer
WHERE first_name LIKE 'A%';

#14- Find all customers whose first name ends with "a".
SELECT * FROM Customer
WHERE first_name LIKE '%A';

#15- Display the list of first 4 cities which start and end with ‘a’ .
SELECT city FROM city
WHERE city LIKE 'A%A'
LIMIT 4;

#16- Find all customers whose first name have "NI" in any position.
SELECT * FROM Customer
WHERE first_name LIKE '%NI%';

#17- Find all customers whose first name have "r" in the second position .
SELECT * 
FROM Customer
WHERE SUBSTRING(first_name, 2, 1) = 'R';

#18 - Find all customers whose first name starts with "a" and are at least 5 characters in length.
SELECT * 
FROM Customer
WHERE first_name LIKE 'A%' AND LENGTH(first_name) >= 5;

#19- Find all customers whose first name starts with "a" and ends with "o".
SELECT * FROM Customer
WHERE first_name LIKE 'A%O';

#20 - Get the films with pg and pg-13 rating using IN operator.
SELECT title, rating 
FROM Film
WHERE rating IN ('PG', 'PG-13');

#21 - Get the films with length between 50 to 100 using between operator.
SELECT title, length 
FROM Film
WHERE length BETWEEN 50 AND 100;

#22 - Get the top 50 actors using limit operator.
SELECT * FROM Actor
LIMIT 50;

#23 - Get the distinct film ids from inventory table.
SELECT DISTINCT film_id 
FROM Inventory;

# Question 1: Retrieve the total number of rentals made in the Sakila database. Hint: Use the COUNT() function.   
SELECT COUNT(*) AS total_rentals
FROM rental;

#Question 2:Find the average rental duration (in days) of movies rented from the Sakila database.Hint: Utilize the AVG() function.
SELECT AVG(rental_duration) AS avg_rental_days
FROM film;


#Question 3:Display the first name and last name of customers in uppercase.Hint: Use the UPPER () function.
SELECT UPPER(first_name) AS uppercase_first_name, 
       UPPER(last_name) AS uppercase_last_name
FROM customer;

#Question 4:Extract the month from the rental date and display it alongside the rental ID.Hint: Employ the MONTH() function.
SELECT rental_id, MONTH(rental_date) AS rental_month
FROM rental;

#Question 5:Retrieve the count of rentals for each customer (display customer ID and the count of rentals).
SELECT customer_id, COUNT(rental_id) AS rental_count
FROM rental
GROUP BY customer_id;


#Question 6:Find the total revenue generated by each store.Hint: Combine SUM() and GROUP BY.
SELECT staff.store_id, SUM(amount) AS total_revenue
FROM payment
JOIN staff ON payment.staff_id = staff.staff_id
GROUP BY staff.store_id;

#Question 7:Determine the total number of rentals for each category of movies.Hint: JOIN film_category, film, and rental tables, then use cOUNT () and GROUP BY.
SELECT category.name AS category_name, COUNT(rental.rental_id) AS total_rentals
FROM rental
JOIN inventory ON rental.inventory_id = inventory.inventory_id
JOIN film ON inventory.film_id = film.film_id
JOIN film_category ON film.film_id = film_category.film_id
JOIN category ON film_category.category_id = category.category_id
GROUP BY category.name;

#Question 8:Find the average rental rate of movies in each language.Hint: JOIN film and language tables, then use AVG () and GROUP BY
SELECT language.name AS language_name, AVG(film.rental_rate) AS avg_rental_rate
FROM film
JOIN language ON film.language_id = language.language_id
GROUP BY language.name;

#JOINS

#Questions 9 -Display the title of the movie, customer s first name, and last name who rented it.Hint: Use JOIN between the film, inventory, rental, and customer tables.
SELECT f.title, c.first_name, c.last_name
FROM rental r
JOIN inventory i ON r.inventory_id = i.inventory_id
JOIN film f ON i.film_id = f.film_id
JOIN customer c ON r.customer_id = c.customer_id;


#Question 10:Retrieve the names of all actors who have appeared in the film "Gone with the Wind."Hint: Use JOIN between the film actor, film, and actor tables.
SELECT a.first_name, a.last_name
FROM actor a
JOIN film_actor fa ON a.actor_id = fa.actor_id
JOIN film f ON fa.film_id = f.film_id
WHERE f.title = 'Gone with the Wind';



#Question 11:Retrieve the customer names along with the total amount they've spent on rentals.Hint: JOIN customer, payment, and rental tables, then use SUM() and GROUP BY.
SELECT c.first_name, c.last_name, SUM(p.amount) AS total_spent
FROM customer c
JOIN payment p ON c.customer_id = p.customer_id
GROUP BY c.customer_id, c.first_name, c.last_name;


#Question 12:List the titles of movies rented by each customer in a particular city (e.g., 'London').Hint: JOIN customer, address, city, rental, inventory, and film tables, then use GROUP BY.
SELECT c.first_name, c.last_name, f.title
FROM customer c
JOIN address a ON c.address_id = a.address_id
JOIN city ci ON a.city_id = ci.city_id
JOIN rental r ON c.customer_id = r.customer_id
JOIN inventory i ON r.inventory_id = i.inventory_id
JOIN film f ON i.film_id = f.film_id
WHERE ci.city = 'London'
GROUP BY c.first_name, c.last_name, f.title;

#Advanced Joins and GROUP BY:

#Question 13:Display the top 5 rented movies along with the number of times they've been rented.Hint: JOIN film, inventory, and rental tables, then use COUNT () and GROUP BY, and limit the results.
SELECT f.title, COUNT(r.rental_id) AS rental_count
FROM rental r
JOIN inventory i ON r.inventory_id = i.inventory_id
JOIN film f ON i.film_id = f.film_id
GROUP BY f.title
ORDER BY rental_count DESC
LIMIT 5;

#Question 14:Determine the customers who have rented movies from both stores (store ID 1 and store ID 2).Hint: Use JOINS with rental, inventory, and customer tables and consider COUNT() and GROUP BY
SELECT c.customer_id, c.first_name, c.last_name
FROM customer c
JOIN rental r ON c.customer_id = r.customer_id
JOIN inventory i ON r.inventory_id = i.inventory_id
JOIN store s ON i.store_id = s.store_id
WHERE s.store_id IN (1, 2)
GROUP BY c.customer_id, c.first_name, c.last_name
HAVING COUNT(DISTINCT s.store_id) = 2;

#Windows Function:

#1. Rank the customers based on the total amount they've spent on rentals.
SELECT c.customer_id, c.first_name, c.last_name, SUM(p.amount) AS total_spent,
       RANK() OVER (ORDER BY SUM(p.amount) DESC) AS spending_rank
FROM customer c
JOIN payment p ON c.customer_id = p.customer_id
GROUP BY c.customer_id, c.first_name, c.last_name
ORDER BY total_spent DESC;

#2. Calculate the cumulative revenue generated by each film over time.
SELECT f.title, p.payment_date, SUM(p.amount) OVER (PARTITION BY f.film_id ORDER BY p.payment_date) AS cumulative_revenue
FROM film f
JOIN inventory i ON f.film_id = i.film_id
JOIN rental r ON i.inventory_id = r.inventory_id
JOIN payment p ON r.rental_id = p.rental_id;

#3. Determine the average rental duration for each film, considering films with similar lengths.
SELECT f.title, f.length, AVG(f.rental_duration) OVER (PARTITION BY f.length) AS avg_rental_duration
FROM film f;

#4. Identify the top 3 films in each category based on their rental counts.
WITH RankedFilms AS (
    SELECT c.name AS category_name, f.title, COUNT(r.rental_id) AS rental_count,
           RANK() OVER (PARTITION BY c.category_id ORDER BY COUNT(r.rental_id) DESC) AS category_rank
    FROM category c
    JOIN film_category fc ON c.category_id = fc.category_id
    JOIN film f ON fc.film_id = f.film_id
    JOIN inventory i ON f.film_id = i.film_id
    JOIN rental r ON i.inventory_id = r.inventory_id
    GROUP BY c.name, f.title, c.category_id
)
SELECT category_name, title, rental_count, category_rank
FROM RankedFilms
WHERE category_rank <= 3;

#5. Calculate the difference in rental counts between each customer's total rentals and the average rentals across all customers
SELECT c.customer_id, c.first_name, c.last_name, 
       COUNT(r.rental_id) AS total_rentals,
       AVG(COUNT(r.rental_id)) OVER () AS avg_rentals,
       COUNT(r.rental_id) - AVG(COUNT(r.rental_id)) OVER () AS rental_difference
FROM rental r
JOIN customer c ON r.customer_id = c.customer_id
GROUP BY c.customer_id, c.first_name, c.last_name;

#6. Find the monthly revenue trend for the entire rental store over time.
SELECT DATE_FORMAT(payment_date, '%Y-%m') AS month, SUM(amount) AS total_revenue
FROM payment
GROUP BY month
ORDER BY month;

#7. Identify the customers whose total spending on rentals falls within the top 20% of all customers.
WITH CustomerSpending AS (
    SELECT customer_id, SUM(amount) AS total_spent
    FROM payment
    GROUP BY customer_id
),
RankedCustomers AS (
    SELECT customer_id, total_spent,
           NTILE(5) OVER (ORDER BY total_spent DESC) AS spending_percentile
    FROM CustomerSpending
)
SELECT customer_id, total_spent
FROM RankedCustomers
WHERE spending_percentile = 1;

#8. Calculate the running total of rentals per category, ordered by rental count.
SELECT c.name AS category_name, f.title, COUNT(r.rental_id) AS rental_count,
       SUM(COUNT(r.rental_id)) OVER (PARTITION BY c.category_id ORDER BY COUNT(r.rental_id) DESC) AS running_total
FROM category c
JOIN film_category fc ON c.category_id = fc.category_id
JOIN film f ON fc.film_id = f.film_id
JOIN inventory i ON f.film_id = i.film_id
JOIN rental r ON i.inventory_id = r.inventory_id
GROUP BY c.name, f.title, c.category_id
ORDER BY c.name, rental_count DESC;

#9. Find the films that have been rented less than the average rental count for their respective categories.
WITH CategoryAvg AS (
    SELECT fc.category_id, AVG(FilmRentals.rental_count) AS avg_rentals
    FROM (
        SELECT fc.category_id, f.film_id, COUNT(r.rental_id) AS rental_count
        FROM film f
        JOIN film_category fc ON f.film_id = fc.film_id
        JOIN inventory i ON f.film_id = i.film_id
        JOIN rental r ON i.inventory_id = r.inventory_id
        GROUP BY fc.category_id, f.film_id
    ) AS FilmRentals
    GROUP BY fc.category_id
)
SELECT category_id, avg_rentals FROM CategoryAvg

#10. Identify the top 5 months with the highest revenue and display the revenue generated in each month.
SELECT DATE_FORMAT(payment_date, '%Y-%m') AS month, SUM(amount) AS total_revenue
FROM payment
GROUP BY month
ORDER BY total_revenue DESC
LIMIT 5;

